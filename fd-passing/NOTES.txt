fd-passing
==========

Tasks
-----

Rename this to py_cp5o

py_cp5o.send()
py_cp5o.recv()

Naming Idea: FastCLI
--------------------

Kind of like FastCGI


In fact you can recast CGI in this protocol!!!


- cp5o: The Unix Coprocess Protocol
  - it's a TRANSPORT protocol which is a thin layer over Unix Domain Sockets (socketpair() usually)
  - FastCLI is a set of cp5o commands:
    - GETPID (maybe: GETCWD for debugging)
    - CHDIR, SETENV, ARGV -> STATUS 0
  - HEADLESS SHELL is a set of commands tooo
    - ECMD (entered command)
    - PARSE (for completion and autosuggestions, TODO)
    - osh --c5po

- problem: fastcli is TAKEN
  - need another catchy name for it

  - how about FCLI
  - QuickCLI
    - QCLI
    - but the Q in QTT means something else -- quoted, typed tables
  - low latency
  - typing speed
- RapidCLI
- WarmCLI

- flycli -- FlyCLI
- snapcli

- FastCGI, SCGI


- this can ENCOMPASS CGI protocol!
  - it's kind of like HTTP 2.0 to HTTP 1.1.  The logical structure is the same
    (argv, env, stdin, stdout, stderr), but the "transport" is changed.

    argv and env go over CONTROL CHANNEL, and stdin/stdout/stderr go over
    DESCRIPTORS PASSED BETEEEN PROCESSES over that control channel (that Unix
    domain socket.)

- TODO: really need some diagrams
  - Technical drawing
  - should you make them with dot or something?  Or RichardHipp's tool?
    - need webpipe 2


Bindings We Need in the server
------------------------------

We get --c5po-socket-fd, so we DO NOT need socketpair() 
We don't need accept(), listen(), etc.

We need to create a socket from an FD.  

# Honestly we don't really need this
sock = c5po.CreateSocket(fd)


msg, descriptors = c5po.Receive(c5po_socket_fd)

fd_out = []
msg = c5po.Receive(c5po_socket_fd, fd_out)

c5po.Send(c5po_socket_fd, reply)

Protocol
--------

### Invocation

- client calls socketpair()
  - fork() the server
  - then connect the child's stdin/stdout to it?
  - then exec() the child
  - then we don't have to worry about concurrent usage?
    - the parent process OWNS the coprocess?


osh -i --c5po-socket-fd=4
osh -i --c5po-socket-fd 4   # Is the = optional or required?

-i is important so the oshrc is sourced!


# LATER:
osh -i --c5po-socket-path /tmp/oil-socket

similar to BASH_XTRACE_FD?

"coprocess protocol" has 5 O's


### cp5o Wire Protocol

REQUEST: (BLOB, [optional list of FDs]) -> BLOB

Where BLOB is encoded as netstring.

### cp5o API

cp5o.send(sock_fd, blob, fd0, fdh, f2) -> bytes written?
  Can raise IOError

cp5o.receive(sock_fd, fd_out) -> blob


TODO: Should this be send/recv, or read/write?

cp5o_get()
cp5o_put()

cp5o.get()
cp5o.put()

I think read/write is more traditional

send/recv is also OK

### cp5o Commands

Blobs are encoded as netstrings.

Two cases:

- Coprocess protocol
  - ARGV -> STATUS
    - Key point: this is STATELESS
    - the shell can wipe thes tae
    - it's like sh -C
  - SETENV
  - CHDIR
  - GETPWD
  - GETPID (sanity check)
- it's basically a mirror of the process state ?

- Stateful Shell
  - ECMD -> OK / FAIL
    - CANNOT be done with ARGV because it's stateful
      - it's NOT equivalent to sh -c
    - does NOT return status?  I don't think so

    - does this do the dup2() dance?  is it canned?
      - or should it  there be separate DUP commands?
      - so does the main loop need a handle to fd_state?

  - COMPLETE -- ECMD 'complete' better?
  - DUMP -- ECMD 'declare -p' might be enough?
  - PARSE or SHPARSE: for auto-suggestions, incomplete command lines, etc.

### Extensions for Concurrency?

You could put a request ID somehwere?

like 

1 ECMD ls /

1 OK

532 ECMD echo hi
532 OK

533 ECMD (    # This results in a parse error, but is OK
533 OK

Typical Client Usage
--------------------

A typical entry requires 3 commands: prompt, execute, and dump-state

ECMD echo ${PS1@P}
ECMD cd / 
ECMD dump-state  # this retrieves $?, pwd, etc.

Message Structure
-----------------

- Netstrings, with the descriptors attached to 'foo' in '3:foo,'

- then it can PARSE the whole payload?
  - like ARGV foo
  - 32:MAIN\0foo.py\0arg\0,
  - should there be another SETENV command?
    - 42:SETENV\0FOO=BAR\BAR=BAZ\0,?

- when it's MAIN or ARGV, then the server should get FDs along with it, and
  then do the dup2() dance!  for its own stdin and stdout.
