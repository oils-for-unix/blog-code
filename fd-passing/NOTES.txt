fd-passing
==========

Tasks
-----

- Write recvmsg() wrapper in Python 2

Usage:

   fd_out = []

   while True:
     # This does the netstring protocol I think
     msg = libc.CoprocessRecv(sock, fd_out)
     ...

     del fd_out[:}

Bindings We Need in the server
------------------------------

We get --c5po-socket-fd, so we DO NOT need socketpair() 
We don't need accept(), listen(), etc.

We need to create a socket from an FD.  

# Honestly we don't really need this
sock = c5po.CreateSocket(fd)


msg, descriptors = c5po.Receive(c5po_socket_fd)

fd_out = []
msg = c5po.Receive(c5po_socket_fd, fd_out)

c5po.Send(c5po_socket_fd, reply)


Naming
------

C5PO, sort of like C-3PO


Protocol
--------

### Invocation

- client calls socketpair()
  - fork() the server
  - then connect the child's stdin/stdout to it?
  - then exec() the child
  - then we don't have to worry about concurrent usage?
    - the parent process OWNS the coprocess?


osh -i --c5po-socket-fd=4
osh -i --c5po-socket-fd 4   # Is the = optional or required?

-i is important so the oshrc is sourced!


# LATER:
osh -i --c5po-socket-path /tmp/oil-socket

similar to BASH_XTRACE_FD?

"coprocess protocol" has 5 O's


### C5PO Wire Protocol

REQUEST: (BLOB, [optional list of FDs])

-> BLOB

Where BLOB is both a netstring.

### C5PO Commands

Blobs are encoded as netstrings.

Two cases:

- Coprocess protocol
  - ARGV -> STATUS
    - Key point: this is STATELESS
    - the shell can wipe thes tae
    - it's like sh -C
  - what about ENV and CD, etc.

- Stateful Shell
  - ECMD -> OK / FAIL
    - CANNOT be done with ARGV because it's stateful
      - it's NOT equivalent to sh -c
    - does NOT return status?  I don't think so

    - does this do the dup2() dance?  is it canned?
      - or should it  there be separate DUP commands?
      - so does the main loop need a handle to fd_state?

  - COMPLETE -- ECMD 'complete' better?
  - DUMP -- ECMD 'declare -p' might be enough?
  - PARSE or SHPARSE: for auto-suggestions, incomplete command lines, etc.

More comments:

- ENV
- CD -- change directories?
  - not supported by default?
- it's basically a mirror of the process state ?

Typical Client Usage
--------------------

A typical entry requires 3 commands: prompt, execute, and dump-state

ECMD echo ${PS1@P}
ECMD cd / 
ECMD dump-state  # this retrieves $?, pwd, etc.

Message Structure
-----------------

- Netstrings?
  - recv() take a number of bytes?

- can it just read(1) until it hits :, and then gets a length
  - then it will call recvmsg()

- what happens to the descriptors if you call read() or recv() instead of
  recvmsg()?  Do they just disappear?

- then it can PARSE the whole payload?
  - like ARGV foo
  - 32:MAIN\0foo.py\0arg\0,
  - should there be another SETENV command?
    - 42:SETENV\0FOO=BAR\BAR=BAZ\0,?

- when it's MAIN or ARGV, then the server should get FDs along with it, and
  then do the dup2() dance!  for its own stdin and stdout.
